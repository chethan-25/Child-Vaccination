{"ast":null,"code":"// Add this to the top of your App.js after other imports\nimport { ethers } from 'ethers';\n\n// Add this contract ABI (Application Binary Interface)\nconst CONTRACT_ABI = [{\n  \"inputs\": [{\n    \"internalType\": \"string\",\n    \"name\": \"_name\",\n    \"type\": \"string\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"_dateOfBirth\",\n    \"type\": \"uint256\"\n  }, {\n    \"internalType\": \"string\",\n    \"name\": \"_parentName\",\n    \"type\": \"string\"\n  }, {\n    \"internalType\": \"string\",\n    \"name\": \"_contactInfo\",\n    \"type\": \"string\"\n  }, {\n    \"internalType\": \"string\",\n    \"name\": \"_tokenURI\",\n    \"type\": \"string\"\n  }],\n  \"name\": \"registerChild\",\n  \"outputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"\",\n    \"type\": \"uint256\"\n  }],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"_tokenId\",\n    \"type\": \"uint256\"\n  }, {\n    \"internalType\": \"string\",\n    \"name\": \"_vaccineName\",\n    \"type\": \"string\"\n  }, {\n    \"internalType\": \"string\",\n    \"name\": \"_hospitalName\",\n    \"type\": \"string\"\n  }, {\n    \"internalType\": \"string\",\n    \"name\": \"_batchNumber\",\n    \"type\": \"string\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"_nextDueDate\",\n    \"type\": \"uint256\"\n  }, {\n    \"internalType\": \"string\",\n    \"name\": \"_ipfsHash\",\n    \"type\": \"string\"\n  }],\n  \"name\": \"recordVaccination\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"_tokenId\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"getChildInfo\",\n  \"outputs\": [{\n    \"components\": [{\n      \"internalType\": \"string\",\n      \"name\": \"name\",\n      \"type\": \"string\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"dateOfBirth\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"string\",\n      \"name\": \"parentName\",\n      \"type\": \"string\"\n    }, {\n      \"internalType\": \"string\",\n      \"name\": \"contactInfo\",\n      \"type\": \"string\"\n    }, {\n      \"internalType\": \"bool\",\n      \"name\": \"isRegistered\",\n      \"type\": \"bool\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"registrationDate\",\n      \"type\": \"uint256\"\n    }],\n    \"internalType\": \"struct VaccinationRegistry.Child\",\n    \"name\": \"\",\n    \"type\": \"tuple\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}];\n\n// Replace your connectWallet method with this enhanced version:\nconnectWallet = async () => {\n  try {\n    if (typeof window.ethereum !== 'undefined') {\n      this.setState({\n        loading: true\n      });\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      if (accounts.length > 0) {\n        // Create provider and signer\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n\n        // Initialize contract\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n        this.setState({\n          account: accounts[0],\n          provider: provider,\n          contract: contract,\n          currentView: 'dashboard',\n          loading: false\n        });\n        console.log('Blockchain connection established!');\n      } else {\n        this.setState({\n          loading: false\n        });\n      }\n    } else {\n      alert('Please install MetaMask wallet!');\n    }\n  } catch (error) {\n    console.error('Connection error:', error);\n    alert('Error connecting wallet: ' + error.message);\n    this.setState({\n      loading: false\n    });\n  }\n};\n\n// Update your RegistrationForm handleSubmit method:\nhandleSubmit = async e => {\n  e.preventDefault();\n  try {\n    if (this.props.contract) {\n      var _receipt$events, _event$args;\n      // Convert date to timestamp\n      const birthTimestamp = Math.floor(new Date(this.state.dateOfBirth).getTime() / 1000);\n      console.log('Calling smart contract...');\n\n      // Call the smart contract\n      const tx = await this.props.contract.registerChild(this.state.childName, birthTimestamp, this.state.parentName, this.state.contactInfo, \"\" // Empty token URI for now\n      );\n      console.log('Transaction submitted:', tx.hash);\n      alert('Transaction submitted! Hash: ' + tx.hash);\n\n      // Wait for confirmation\n      const receipt = await tx.wait();\n      console.log('Transaction confirmed:', receipt);\n\n      // Get the token ID from the event\n      const event = (_receipt$events = receipt.events) === null || _receipt$events === void 0 ? void 0 : _receipt$events.find(e => e.event === 'ChildRegistered');\n      const tokenId = event === null || event === void 0 ? void 0 : (_event$args = event.args) === null || _event$args === void 0 ? void 0 : _event$args.tokenId;\n      alert(`âœ… Child registered successfully!\\nToken ID: ${tokenId}\\nTransaction: ${tx.hash}`);\n    } else {\n      alert('Please connect your wallet first!');\n    }\n  } catch (error) {\n    console.error('Registration error:', error);\n    alert('Error: ' + error.message);\n  }\n\n  // Reset form\n  this.setState({\n    childName: '',\n    dateOfBirth: '',\n    parentName: '',\n    contactInfo: ''\n  });\n};","map":{"version":3,"names":["ethers","CONTRACT_ABI","connectWallet","window","ethereum","setState","loading","accounts","request","method","length","provider","providers","Web3Provider","signer","getSigner","contract","Contract","CONTRACT_ADDRESS","account","currentView","console","log","alert","error","message","handleSubmit","e","preventDefault","props","_receipt$events","_event$args","birthTimestamp","Math","floor","Date","state","dateOfBirth","getTime","tx","registerChild","childName","parentName","contactInfo","hash","receipt","wait","event","events","find","tokenId","args"],"sources":["C:/Users/NEHA SAI PRIYA/Downloads/Covid-Vaccine-Verification-Blockchain-main/Covid-Vaccine-Verification-Blockchain-main/FrontEnd_App/src/App.js"],"sourcesContent":["// Add this to the top of your App.js after other imports\nimport { ethers } from 'ethers';\n\n// Add this contract ABI (Application Binary Interface)\nconst CONTRACT_ABI = [\n  {\n    \"inputs\": [\n      {\"internalType\": \"string\", \"name\": \"_name\", \"type\": \"string\"},\n      {\"internalType\": \"uint256\", \"name\": \"_dateOfBirth\", \"type\": \"uint256\"},\n      {\"internalType\": \"string\", \"name\": \"_parentName\", \"type\": \"string\"},\n      {\"internalType\": \"string\", \"name\": \"_contactInfo\", \"type\": \"string\"},\n      {\"internalType\": \"string\", \"name\": \"_tokenURI\", \"type\": \"string\"}\n    ],\n    \"name\": \"registerChild\",\n    \"outputs\": [{\"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\"}],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\"internalType\": \"uint256\", \"name\": \"_tokenId\", \"type\": \"uint256\"},\n      {\"internalType\": \"string\", \"name\": \"_vaccineName\", \"type\": \"string\"},\n      {\"internalType\": \"string\", \"name\": \"_hospitalName\", \"type\": \"string\"},\n      {\"internalType\": \"string\", \"name\": \"_batchNumber\", \"type\": \"string\"},\n      {\"internalType\": \"uint256\", \"name\": \"_nextDueDate\", \"type\": \"uint256\"},\n      {\"internalType\": \"string\", \"name\": \"_ipfsHash\", \"type\": \"string\"}\n    ],\n    \"name\": \"recordVaccination\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [{\"internalType\": \"uint256\", \"name\": \"_tokenId\", \"type\": \"uint256\"}],\n    \"name\": \"getChildInfo\",\n    \"outputs\": [\n      {\n        \"components\": [\n          {\"internalType\": \"string\", \"name\": \"name\", \"type\": \"string\"},\n          {\"internalType\": \"uint256\", \"name\": \"dateOfBirth\", \"type\": \"uint256\"},\n          {\"internalType\": \"string\", \"name\": \"parentName\", \"type\": \"string\"},\n          {\"internalType\": \"string\", \"name\": \"contactInfo\", \"type\": \"string\"},\n          {\"internalType\": \"bool\", \"name\": \"isRegistered\", \"type\": \"bool\"},\n          {\"internalType\": \"uint256\", \"name\": \"registrationDate\", \"type\": \"uint256\"}\n        ],\n        \"internalType\": \"struct VaccinationRegistry.Child\",\n        \"name\": \"\",\n        \"type\": \"tuple\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n];\n\n// Replace your connectWallet method with this enhanced version:\nconnectWallet = async () => {\n  try {\n    if (typeof window.ethereum !== 'undefined') {\n      this.setState({ loading: true });\n      \n      // Request account access\n      const accounts = await window.ethereum.request({ \n        method: 'eth_requestAccounts' \n      });\n      \n      if (accounts.length > 0) {\n        // Create provider and signer\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        \n        // Initialize contract\n        const contract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          CONTRACT_ABI,\n          signer\n        );\n        \n        this.setState({ \n          account: accounts[0], \n          provider: provider,\n          contract: contract,\n          currentView: 'dashboard',\n          loading: false \n        });\n        \n        console.log('Blockchain connection established!');\n      } else {\n        this.setState({ loading: false });\n      }\n    } else {\n      alert('Please install MetaMask wallet!');\n    }\n  } catch (error) {\n    console.error('Connection error:', error);\n    alert('Error connecting wallet: ' + error.message);\n    this.setState({ loading: false });\n  }\n}\n\n// Update your RegistrationForm handleSubmit method:\nhandleSubmit = async (e) => {\n  e.preventDefault();\n  \n  try {\n    if (this.props.contract) {\n      // Convert date to timestamp\n      const birthTimestamp = Math.floor(new Date(this.state.dateOfBirth).getTime() / 1000);\n      \n      console.log('Calling smart contract...');\n      \n      // Call the smart contract\n      const tx = await this.props.contract.registerChild(\n        this.state.childName,\n        birthTimestamp,\n        this.state.parentName,\n        this.state.contactInfo,\n        \"\" // Empty token URI for now\n      );\n      \n      console.log('Transaction submitted:', tx.hash);\n      alert('Transaction submitted! Hash: ' + tx.hash);\n      \n      // Wait for confirmation\n      const receipt = await tx.wait();\n      console.log('Transaction confirmed:', receipt);\n      \n      // Get the token ID from the event\n      const event = receipt.events?.find(e => e.event === 'ChildRegistered');\n      const tokenId = event?.args?.tokenId;\n      \n      alert(`âœ… Child registered successfully!\\nToken ID: ${tokenId}\\nTransaction: ${tx.hash}`);\n      \n    } else {\n      alert('Please connect your wallet first!');\n    }\n  } catch (error) {\n    console.error('Registration error:', error);\n    alert('Error: ' + error.message);\n  }\n  \n  // Reset form\n  this.setState({\n    childName: '',\n    dateOfBirth: '',\n    parentName: '',\n    contactInfo: ''\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}